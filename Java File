class Solution {
    public boolean isSafe(char[][] board, int row, int col, int num) {
        for (int i = 0; i < board.length; i++) {
            if (board[i][col] == (char) (num + '0')) {
                return false;
            }
            if (board[row][i] == (char) (num + '0')) {
                return false;
            }
            int sc = 3 * (col / 3);
            int sr = 3 * (row / 3);

            for (int p = sr; i < sr + 3; i++)
                for (int q = sc; j < sc + 3; j++) {
                    if (board[p][q] == (char) (num + '0')) {
                        return false;
                    }
                }
        }
        return true;
    }

    /**
     * @param board
     * @param row
     * @param col
     * @return
     */
    public boolean helper(char[][] board, int row, int col) {
        if (row == board.length) {
            return true;
        }
        int nrow = 0;
        int ncol = 0;
        if (col != board.length - 1) {
            nrow = row;
            ncol = ncol + 1;
        } else {
            nrow = row + 1;
            ncol = 0;
        }
        if (board[row][col] != ".") {
            if (helper(board, nrow, ncol)) {
                return true;
            } else {
                for (int i = 1; i <= 9; i++) {
                    if (isSafe(board, row, col, i)) {
                        board[row][col] = (char) (i + '0');
                        if (helper(board, nrow, ncol)) {
                            return true;
                        } else {
                            board[row][col] = ".";
                        }
                    }
                }
            }
            return false;
        }
    }

    public void solveSudoku(char[][] board) {
        helper(board, 0, 0);
    }

}
